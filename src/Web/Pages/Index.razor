@page "/"
@using Web.Data
@using Infrastructure.Data
@using Application.Models
@using Domain.Entities
@using Application.Features.DataAnalysis
@using System.IO
@using AutoMapper
@using Infrastructure.Data.Parsers
@using Infrastructure.Data.Parsers.Pipeline
@inject DeckAnalysisService DeckAnalysisService

<h1>Deck Analysis</h1>

<p>
    <label>Deck file:</label>
    <InputFile OnChange="@OnInputDeckFileChange"/>
</p>

<p>
    <label>Pool file:</label>
    <InputFile OnChange="@OnInputPoolFileChange"/>
</p>

@if (DeckAnalysisService.DeckAndRatings != null) {
    <h1>Deck Ranking</h1>
    <table class="table">
        <thead>
        <tr>
            <th>#</th>
            <th>Card Name</th>
            <th>Rating</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var (name, rating, index) in DeckAnalysisService.DeckAndRatings.Select((d,index) => (d.Name,d.Rating,index))) {
            <tr>
                <td>@(index+1)</td>
                <td>
                    <auto-card>@name</auto-card>
                </td>
                <td>@DataAnalysis.GetRatingDisplay(rating)</td>
            </tr>
        }
        </tbody>
    </table>
}

@if (DeckAnalysisService.PoolAndRatings != null) {
    <h1>Pool Ranking</h1>
    <table class="table">
        <thead>
        <tr>
            <th>#</th>
            <th>Card Name</th>
            <th>Rating</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var (name, rating, index) in DeckAnalysisService.PoolAndRatings.Select((d, index) => (d.Name, d.Rating, index))) {
            <tr>
                <td>@(index+1)</td>
                <td>
                    <auto-card>@name</auto-card>
                </td>
                <td>@DataAnalysis.GetRatingDisplay(rating)</td>
            </tr>
        }
        </tbody>
    </table>
}


@if (DeckAnalysisService.ColorRatings != null) {
    <h1>Color Ranking</h1>
    <table class="table">
        <thead>
        <tr>
            @foreach (var header in DeckAnalysisService.ColorRatings.Select(c => c.Color)) {
                <th>@header</th>
            }
        </tr>
        </thead>
        <tbody>
        <tr>
            @foreach (var rating in DeckAnalysisService.ColorRatings.Select(c => c.Rating)) {
                <td>@rating</td>
            }
        </tr>
        </tbody>
    </table>
}

@if (DeckAnalysisService.TribalData != null) {
    <h1>Tribal Ranking</h1>
    <table class="table">
        <thead>
        <tr>
            <th>Tribe</th>
            <th>Total</th>
            <th>Avg Rating</th>
            <th>Overall Rating</th>
            <th>Colors</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var tribalData in DeckAnalysisService.TribalData) {
            <tr>
                <td>@tribalData.Tribe</td>
                <td>@tribalData.NumberOfCreatures</td>
                <td>@DataAnalysis.GetRatingDisplay(tribalData.AvgRating)</td>
                <td>@tribalData.TribalRating</td>
                <td>@string.Join(",", tribalData.Colors)</td>
            </tr>
        }
        </tbody>
    </table>
}

@if (DeckAnalysisService.InColorCards != null) {
    <h1>Cards in your colors to consider</h1>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Cost</th>
            <th>Rating</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var cardsToConsider in DeckAnalysisService.InColorCards) {
            <tr>
                <td>
                    <auto-card>@cardsToConsider.Name</auto-card>
                </td>
                <td>@cardsToConsider.Cost</td>
                <td>@DataAnalysis.GetRatingDisplay(cardsToConsider.Rating)</td>
            </tr>
        }
        </tbody>
    </table>
}

@if (DeckAnalysisService.SharedColorCards != null) {
    <h1>Cards that share a color to consider</h1>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Cost</th>
            <th>Rating</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var cardsToConsider in DeckAnalysisService.SharedColorCards) {
            <tr>
                <td>
                    <auto-card>@cardsToConsider.Name</auto-card>
                </td>
                <td>@cardsToConsider.Cost</td>
                <td>@DataAnalysis.GetRatingDisplay(cardsToConsider.Rating)</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private async Task OnInputDeckFileChange(InputFileChangeEventArgs e) {
        await DeckAnalysisService.ProcessDeckChangeEvent(e);
    }

    private async Task OnInputPoolFileChange(InputFileChangeEventArgs e) {
        await DeckAnalysisService.ProcessPoolChangeEvent(e);
    }
}